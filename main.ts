import { App, Editor, ItemView, MarkdownView, Modal, Notice, Plugin, PluginSettingTab, Setting } from 'obsidian';
import { GetCVE } from 'src/nist_api';
import { MarkdownAdder } from 'src/utils';

// Remember to rename these classes and interfaces!

interface AppSettings {
	exportPath: string,
	nistApiKey: string
}

const DEFAULT_SETTINGS: AppSettings = {
	exportPath: '',
	nistApiKey: '',
}

export default class GatherCVEInfo extends Plugin {
	settings: AppSettings;

	async onload() {
		await this.loadSettings();

		// This creates an icon in the left ribbon.
		// const ribbonIconEl = this.addRibbonIcon('dice', 'Sample Plugin', (evt: MouseEvent) => {
		// 	// Called when the user clicks the icon.
		// 	new Notice('Hello, you!');
		// });

		this.addCommand({
			id: "gather-cve",
			name: 'Gather CVE information from selection',
			editorCallback: this.performCVESearch
		});

		this.registerEvent(
			this.app.workspace.on("editor-menu", (menu, editor, view) => {
				menu.addItem((item) => {
					item
						.setTitle("Get CVE Info")
						.setIcon('document')
						.onClick(() => this.performCVESearch(editor))
				})
			})
		)

		// This adds a settings tab so the user can configure various aspects of the plugin
		this.addSettingTab(new SettingsTab(this.app, this));
	}

	// TODO: find a way to replace the the initial selection with the link to another page.
	async performCVESearch(editor: Editor){
		const cve = editor.getSelection();
		const resp = GetCVE(cve)
				
		// var output = "";

		// resp.then((cve_details) => {
		// 	output += `tags:: #cve/${cve}\n`;
		// 	output += `cvee base score:: ${cve_details.cvssMetricv31.baseScore}\n`;
		// 	output += `attack vector:: ${cve_details.cvssMetricv31.attackVector}\n`;
		// 	output += `attack complexity:: ${cve_details.cvssMetricv31.attackComplexity}\n`;
		// 	output += `user interaction:: ${cve_details.cvssMetricv31.userInteraction}\n`;
		// 	output += `privileges required:: ${cve_details.cvssMetricv31.privilegesRequired}\n\n`;

		// 	output += '---\n\n'

		// 	output += '# Quick Description\n\n';
		// 	output += cve_details.description + "\n\n";
		// 	output += '## Affected Applications\n\n';

		// 	output += '| Application | From (including) | Up to (including) | From (excluding) | Up to (excluding) |\n'
					
		// 	cve_details.affected_configs.forEach((element) => { output += `| ${element.criteria} | ${element.version_start_including} | ${element.version_end_including} | ${element.version_start_excluding} | ${element.version_end_excluding} |\n` });

		// 	output += '\n\n---\n\n';
		// 	output += '# References\n\n';
		// 	cve_details.references.forEach((element) => output += `- ${element}\n`);
		// 	this.app.vault.create(`${this.settings.exportPath}/${cve}.md`, output);
		// });
		const m_adder = new MarkdownAdder();
		resp.then((cve_details) => {
			m_adder.addContent(`tags:: #cve/${cve}`);
			m_adder.addContent(`cvee base score:: ${cve_details.cvssMetricv31.baseScore}`);
			m_adder.addContent(`attack vector:: ${cve_details.cvssMetricv31.attackVector}`);
			m_adder.addContent(`attack complexity:: ${cve_details.cvssMetricv31.attackComplexity}`);
			m_adder.addContent(`user interaction:: ${cve_details.cvssMetricv31.userInteraction}`);
			m_adder.addContent(`privileges required:: ${cve_details.cvssMetricv31.privilegesRequired}`);

			m_adder.addSplit();

			m_adder.addHeader1("Quick Description");
			m_adder.addContent(cve_details.description);
			m_adder.addHeader2("Affected Applications");
			
			m_adder.addContent('| Application | From (including) | Up to (including) | From (excluding) | Up to (excluding) |');
			cve_details.affected_configs.forEach((element) => m_adder.addContent(`| ${element.criteria} | ${element.version_start_including} | ${element.version_end_including} | ${element.version_start_excluding} | ${element.version_end_excluding} |`))
			
			m_adder.addSplit();

			m_adder.addHeader1('References');
			cve_details.references.forEach((element) => m_adder.addListItem(element));

			this.app.vault.create(`${this.settings.exportPath}/${cve}.md`, m_adder.toString());
		});
	}

	onunload() {

	}

	async loadSettings() {
		this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
		console.log(`API ${this.settings.nistApiKey}`)
		if(this.settings.nistApiKey != ''){
			new Notice(`NIST API Key is set`)
		}
	}

	async saveSettings() {
		await this.saveData(this.settings);
	}
}

class SettingsTab extends PluginSettingTab {
	plugin: GatherCVEInfo;

	constructor(app: App, plugin: GatherCVEInfo) {
		super(app, plugin);
		this.plugin = plugin;
	}

	display(): void {
		const {containerEl} = this;

		containerEl.empty();

		containerEl.createEl('h2', {text: 'Settings for Gather CVE Info'});

		new Setting(containerEl)
			.setName('Export Path')
			.setDesc('Path to place the exported information.')
			.addText(text => text
				.setPlaceholder('Example: folder 1/folder 2')
				.setValue(this.plugin.settings.exportPath)
				.onChange(async (value) => {
					console.log('Path: ' + value);
					this.plugin.settings.exportPath = value;
					await this.plugin.saveSettings();
				}));
		new Setting(containerEl)
			.setName('NIST API Key')
			.setDesc('API key for the NIST Development Framework')
			.addText(text => text
				.setValue(this.plugin.settings.nistApiKey)
				.onChange(async (value) => {
					this.plugin.settings.nistApiKey = value;
					new Notice(`NIST API Key is set`)
					await this.plugin.saveSettings();
				}));
	}
}
