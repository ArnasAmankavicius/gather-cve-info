export class CPEMatch {
    public vulnerable: boolean;
    public criteria: string;
    public version_end_including: string;
    public version_start_including: string;
    public version_end_excluding: string;
    public version_start_excluding: string;
    constructor(data: Partial<CPEMatch>) {
        Object.assign(this, data)
    }
}

export class CVSSMetricInfo {
    public attackComplexity: string;
    public attackVector: string;
    public availabilityImpact: string;
    public userInteraction: string;
    public privilegesRequired: string;
    public baseScore: string;
    public version: string;
    constructor(data: Partial<CVSSMetricInfo>) {
        Object.assign(this, data)
    }
}

export class CVEDetails {
    format: string;
    version: string;
    cve_id: string;
    cvssMetricv31: CVSSMetricInfo;
    publish_date: string;
    last_updated: string;
    references: Array<string>;
    description: string;
    required_actions: string;
    vuln_name: string;
    affected_configs: Array<CPEMatch>;
}

// TODO: Should probably add some error checking here :\
export async function GetCVE(cve: String): Promise<CVEDetails> {
    const nist_api_url: string = 'https://services.nvd.nist.gov/rest/json/cves/2.0'

    const cve_details = new CVEDetails();
    const resp = fetch(nist_api_url + `?cveId=${cve}`)
        .then((res) => res.json())
        .then((data) => {
            cve_details.format = data.format;
            cve_details.version = data.version;

            const cve = data.vulnerabilities[0].cve;
            
            cve_details.cve_id = cve.id;
            cve_details.last_updated = cve.lastModified;
            cve_details.publish_date = cve.published;
            
            cve_details.description = cve.descriptions.find((obj: { lang: string; }) => obj.lang === 'en').value;

            cve_details.required_actions = cve.cisaRequiredAction;
            cve_details.vuln_name = cve.cisaVulnerabilityName;

            var temp_arr = Array<string>();
            cve.references.forEach((element: { source: string, tags: Array<string>, url: string}) => {
                temp_arr.push(element.url);
            });

            cve_details.references = temp_arr;
            cve_details.references.push(`https://nvd.nist.gov/vuln/detail/${cve.id}`)

            var cpe_match_array = Array<CPEMatch>();

            const conf = cve.configurations;

            conf.forEach((element: { nodes: []; }, index: any) => {
                element.nodes.forEach((match: {cpeMatch: [];}, index_2) => {
                    match.cpeMatch.forEach((item: {vulnerable: boolean, criteria: string, matchCriteriaId: string, versionEndExcluding: string, versionStartExcluding: string, versionEndIncluding: string, versionStartIncluding: string}, index_3) => {
                        const version_start_ex = (item.versionStartExcluding === undefined) ? "n/a" : item.versionStartExcluding;
                        const version_end_ex = (item.versionEndExcluding === undefined) ? "n/a" : item.versionEndExcluding;
                        const version_start_inc = (item.versionStartIncluding === undefined) ? "n/a" : item.versionStartIncluding;
                        const version_end_inc = (item.versionStartIncluding === undefined) ? "n/a" : item.versionEndIncluding;
                        
                        cpe_match_array.push(new CPEMatch({ vulnerable: item.vulnerable, criteria: item.criteria, version_start_including: version_start_inc, version_end_including: version_end_inc, version_start_excluding: version_start_ex, version_end_excluding: version_end_ex}));
                    });                       
                });
            });

            cve_details.affected_configs = cpe_match_array;

            const cvssData = cve.metrics.cvssMetricV31[0].cvssData;
            
            cve_details.cvssMetricv31 = new CVSSMetricInfo({
                attackComplexity: cvssData.attackComplexity,
                attackVector: cvssData.attackVector,
                availabilityImpact: cvssData.availabilityImpact,
                userInteraction: cvssData.userInteraction,
                privilegesRequired: cvssData.privilegesRequired,
                baseScore: cvssData.baseScore,
                version: cvssData.version
            });
            
            return cve_details;
        });
    return resp;
}
